@using Notification.Core.Extensions
@model NotificationViewModel

<div class="notification" id="mm-notification"></div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css" integrity="sha512-1sCRPdkRXhBV2PBLUdRb4tMg1w2YPf37qatUFeS7zlBy7jJI8Lf4VHwWfZZfpXtYSLy85pkm9GaYVYMfw5BC1A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<style>
    .notification{
      position: fixed;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      color: #fff;
      z-index: 9999;
      display: flex;
      flex-direction: @Model.Configuration.PositionClass();
      align-items: flex-end;
      justify-content: flex-end;
      pointer-events: none;
      box-sizing: border-box;
    }
    
    .mm-notification-alert{
      padding: 20px 40px;
      min-width: 420px;
      max-width: 50%;
      min-height: 90px;
      position: relative;
      display: block;
      border-radius: 4px;
      overflow: hidden;
      opacity: 0;
      pointer-events: none;
      margin-top: 15px;
      margin-bottom: 15px;
    }
    
    .mm-notification-alert.showAlert{
      opacity: 1;
      pointer-events: auto;
    }
    
    .mm-notification-alert.show{
      animation: mm_notification_show_slide 1s ease forwards;
    }
    
    @@keyframes mm_notification_show_slide {
      0%{
        transform: translateX(100%);
      }
      40%{
        transform: translateX(-10%);
      }
      80%{
        transform: translateX(0%);
      }
      100%{
        transform: translateX(-20px);
      }
    }
    
    .mm-notification-alert.hide{
      animation: mm_notification_hide_slide 1s ease forwards;
    }
    
    @@keyframes mm_notification_hide_slide {
      0%{
        transform: translateX(-10px);
      }
      40%{
        transform: translateX(0%);
      }
      80%{
        transform: translateX(-10%);
      }
      100%{
        transform: translateX(100%);
      }
    }
    
    .mm-notification-alert .msg{
      padding: 0 20px;
      font-size: 18px;
    }
    
    .mm-notification-alert .msg .msg-desc{
      font-size: 16px;
      text-overflow: ellipsis;
      overflow: hidden;
      display: -webkit-box;
      -webkit-line-clamp: 3; /* number of lines to show */
      line-clamp: 3; 
      -webkit-box-orient: vertical;
    }
    
    .mm-notification-alert .close-btn{
      position: absolute;
      right: 0px;
      top: 50%;
      transform: translateY(-50%);
      padding: 100% 18px;
      cursor: pointer;
    }
    
    .mm-notification-alert .close-btn .close-icon{
      font-size: 22px;
      line-height: 40px;
    }
    
    .mm-notification-alert .@Model.Configuration.WarningSetting.IconClass(){
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: @Model.Configuration.WarningSetting.AlertIconColor;
        font-size: 30px;
    }
    .mm-notification-alert .@Model.Configuration.InfoSetting.IconClass(){
         position: absolute;
         left: 20px;
         top: 50%;
         transform: translateY(-50%);
         color: @Model.Configuration.InfoSetting.AlertIconColor;
         font-size: 30px;
    }
    .mm-notification-alert .@Model.Configuration.SuccessSetting.IconClass(){
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: @Model.Configuration.SuccessSetting.AlertIconColor;
        font-size: 30px;
    }

     .mm-notification-alert .@Model.Configuration.ErrorSetting.IconClass(){
         position: absolute;
         left: 20px;
         top: 50%;
         transform: translateY(-50%);
         color: @Model.Configuration.ErrorSetting.AlertIconColor;
         font-size: 30px;
     }
     
     .mm-notification-info-alert{
       border-left: 10px solid @Model.Configuration.InfoSetting.AlertLeftBorderColor;
       background: @Model.Configuration.InfoSetting.AlertBackgroundColor;
     }
     
     .mm-notification-info-alert .msg-title{
       color: @Model.Configuration.InfoSetting.AlertMessageTitleColor;
     }
     
     .mm-notification-info-alert .msg-desc{
       color: @Model.Configuration.InfoSetting.AlertMessageColor;
     }
     
     .mm-notification-info-alert .close-btn{
       background: @Model.Configuration.InfoSetting.CloseButtonBackgroundColor;
     }
     
     .mm-notification-info-alert .close-btn:hover{
       background: @Model.Configuration.InfoSetting.CloseButtonHoverColor;
     }
     
     .mm-notification-info-alert .close-btn .close-icon{
       color: @Model.Configuration.InfoSetting.CloseButtonIconColor;
     }
 
     .mm-notification-warning-alert{
       border-left: 10px solid @Model.Configuration.WarningSetting.AlertLeftBorderColor;
       background: @Model.Configuration.WarningSetting.AlertBackgroundColor;
     }
     
     .mm-notification-warning-alert .msg-title{
       color: @Model.Configuration.WarningSetting.AlertMessageTitleColor;
     }
     
     .mm-notification-warning-alert .msg-desc{
        color: @Model.Configuration.WarningSetting.AlertMessageColor;
     }
     
     .mm-notification-warning-alert .close-btn{
       background: @Model.Configuration.WarningSetting.CloseButtonBackgroundColor;
     }
     
     .mm-notification-warning-alert .close-btn:hover{
       background: @Model.Configuration.WarningSetting.CloseButtonHoverColor;
     }
     
     .mm-notification-warning-alert .close-btn .close-icon{
       color: @Model.Configuration.WarningSetting.CloseButtonIconColor;
     }
     
     .mm-notification-success-alert{
       border-left: 10px solid @Model.Configuration.SuccessSetting.AlertLeftBorderColor;
       background: @Model.Configuration.SuccessSetting.AlertBackgroundColor;
     }
     
     .mm-notification-success-alert .msg-title{
       color: @Model.Configuration.SuccessSetting.AlertMessageTitleColor;
     }
     
     .mm-notification-success-alert .msg-desc{
        color: @Model.Configuration.SuccessSetting.AlertMessageColor;
     }
     
     .mm-notification-success-alert .close-btn{
       background: @Model.Configuration.SuccessSetting.CloseButtonBackgroundColor;
     }
     
     .mm-notification-success-alert .close-btn:hover{
       background: @Model.Configuration.SuccessSetting.CloseButtonHoverColor;
     }
     
     .mm-notification-success-alert .close-btn .close-icon{
       color: @Model.Configuration.SuccessSetting.CloseButtonIconColor;
     }

     .mm-notification-error-alert{
       border-left: 10px solid @Model.Configuration.ErrorSetting.AlertLeftBorderColor;
       background: @Model.Configuration.ErrorSetting.AlertBackgroundColor;
     }
     
     .mm-notification-error-alert .msg-title{
       color: @Model.Configuration.ErrorSetting.AlertMessageTitleColor;
     }
     
     .mm-notification-error-alert .msg-desc{
        color: @Model.Configuration.ErrorSetting.AlertMessageColor;
     }
     
     .mm-notification-error-alert .close-btn{
       background: @Model.Configuration.ErrorSetting.CloseButtonBackgroundColor
     }
     
     .mm-notification-error-alert .close-btn:hover{
       background: @Model.Configuration.ErrorSetting.CloseButtonHoverColor;
     }
     
     .mm-notification-error-alert .close-btn .close-icon{
       color: @Model.Configuration.ErrorSetting.CloseButtonIconColor;
     }
</style>

<script>
       
    const notificationId = $('#mm-notification');
    const notificationKey = 'mm-notification-key-';
    const numberOfNotification = @Model.Notifications!.Count();
    const notificationDelayTime = @Model.Configuration.DurationInSeconds;
    let notificationIndex = 0;   
    const notificationConfig = {
      info: {alertIcon: '@Model.Configuration.InfoSetting.Icon'},
      warning: {alertIcon: '@Model.Configuration.WarningSetting.Icon'},
      success: {alertIcon: '@Model.Configuration.SuccessSetting.Icon'},
      error: {alertIcon: '@Model.Configuration.ErrorSetting.Icon'},
    }
    
    class Notification {
        information(message, uniqueId,title = "Information!") {
            return this.prepare(message, title, uniqueId, notificationConfig.info.alertIcon, 'mm-notification-info-alert');
        }
    
        warning(message, uniqueId, title = "Warning!") {
            return this.prepare( message, title, uniqueId, notificationConfig.warning.alertIcon, 'mm-notification-warning-alert');
        }
    
        success(message, uniqueId, title = "Success!") {
            return this.prepare(message, title, uniqueId, notificationConfig.success.alertIcon, 'mm-notification-success-alert');
        }
    
        error(message, uniqueId, title = "Error!") {
            return this.prepare(message, title, uniqueId, notificationConfig.error.alertIcon, 'mm-notification-error-alert');
        }
    
        prepare(message, title, uniqueId, alertIcon, notificationType) {
            return `<div class="mm-notification-alert show showAlert ${notificationType}" id="${uniqueId}">
                         <span class="${alertIcon}"></span>
                         <div class="msg"><strong class="msg-title">${title}</strong><br/><span class="msg-desc">${message}</span></div>
                         <div class="close-btn"><span class="fas fa-times close-icon"></span></div>
                    </div>`;
        }
    }
    
    let notification = new Notification();
    
    function work(message, i){
    
        const workTimer = setTimeout(function(){
         
            $(notificationId).append(message);
            
            notificationIndex += 1;
    
            if(notificationIndex === numberOfNotification) { workDone(); }
   
            clearTimeout(workTimer);
    
        }, 1000 * i);
    }
    
    function workDone(){
        $.each($(notificationId).children(), function(index, _){
             RemoveNotification(index+1);
        });
    }
    
    function RemoveNotification(index) {
        const timer = setTimeout(() => {
            $(`#${notificationKey}${index}`).removeClass('show').addClass('hide');
            clearTimeout(timer);
        }, notificationDelayTime * index);
    }
    
    $(notificationId).on('click', '.close-btn', function(e){
        e.preventDefault();
        if(!$(e.currentTarget).parent().hasClass('mm-notification-alert')) return;
        $(e.currentTarget).parents('.mm-notification-alert').removeClass('show').addClass('hide');
        const timer = setTimeout(() => {
            $(e.currentTarget).parents('.mm-notification-alert').remove();
            clearTimeout(timer);
        }, 1300);
    });
    
    function prepareNotification(alert, key) {
      switch (alert.type) {
        case 1:
          work(notification.information(alert.message, notificationKey+key, alert.title), key);
          break;
        case 2:
          work(notification.success(alert.message, notificationKey+key, alert.title), key);
          break;
        case 3:
          work(notification.warning(alert.message, notificationKey+key, alert.title), key);
          break;
        case 4:
          work(notification.error(alert.message, notificationKey+key, alert.title), key);
          break;
        default:
          work(notification.information(alert.message, notificationKey+key, alert.title), key);
      }
    }

    $(document).ready(function() {
        const notifications = @Html.Raw(Model.Notifications!.ToJson())
        for (let i = 0; i < numberOfNotification; i++) {
          prepareNotification(notifications[i], i+1);
        }
    });

</script>

